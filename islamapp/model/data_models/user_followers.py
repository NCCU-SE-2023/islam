from datetime import datetime
from hashlib import md5
import random
from mongoengine import fields, Document


class UserFollowers(Document):

    # Convert this field for consistency
    user_followers_id = fields.StringField(primary_key=True, required=True)
    scraped_ig_id = fields.StringField(required=True)
    create_at = fields.DateTimeField(required=True)
    followers_count = fields.IntField(required=True)
    followers_list = fields.ListField(required=True)
    followers_change_count = fields.IntField(required=True, default=0)
    followers_change_list = fields.ListField(required=True)
    scrape_user_count = fields.IntField(required=True)
    scrape_user_list = fields.ListField(required=True)
    scraped_times = fields.IntField(required=True)
    scraped_task_list = fields.ListField(required=True)

    @staticmethod
    def create(raw_data):

        # This code generates a unique id for each follower of a given user
        # The unique id is generated by hashing the timestamp of the follower's creation, the follower's Instagram id, and a random number
        # The random number is used to ensure that the same follower, created at the same time, of two different users will be assigned different ids
        # The id is generated in this way so that the id is unique, and does not contain any information about the follower's account
        # This is done so that the id cannot be used to identify the follower's account, and therefore the follower cannot be identified
        create_at = datetime.now()
        user_followers_id = md5(
            str(create_at)
            .join(raw_data["scraped_ig_id"])
            .join(str(random.random()))
            .encode()
        ).hexdigest()
        latest_user_followers = UserFollowers.get_latest_user_followers_by_ig_id(
            raw_data["scraped_ig_id"]
        )
        followers_change_count = 0
        followers_change_list = ["none"]
        scrape_user_count = 1
        scrape_user_list = [raw_data["scrape_user"]]
        scraped_times = 1
        scraped_task_list = [raw_data["scraped_task_id"]]

        # The below code is used to calculate the change in the count of followers and the list of followers added and removed
        if latest_user_followers is not None:
            followers_change_count = (
                raw_data["followers_count"] - latest_user_followers.followers_count
            )
            if followers_change_count == 0:
                followers_change_list = ["none"]
            else:
                followers_add_list = list(
                    set(raw_data["followers_list"])
                    - set(latest_user_followers.followers_list)
                )
                followers_minus_list = list(
                    set(latest_user_followers.followers_list)
                    - set(raw_data["followers_list"])
                )
                followers_change_list.clear()
                followers_change_list = ["added_" + i for i in followers_add_list] + [
                    "removed_" + i for i in followers_minus_list
                ]

            if raw_data["scrape_user"] not in latest_user_followers.scrape_user_list:
                scrape_user_count = latest_user_followers.scrape_user_count + 1
                scrape_user_list.extend(latest_user_followers.scrape_user_list)
            else:
                scrape_user_count = latest_user_followers.scrape_user_count
                scrape_user_list = latest_user_followers.scrape_user_list

            if (
                raw_data["scraped_task_id"]
                not in latest_user_followers.scraped_task_list
            ):
                scraped_times = latest_user_followers.scraped_times + 1
                scraped_task_list.extend(latest_user_followers.scraped_task_list)
            else:
                scraped_times = latest_user_followers.scraped_times
                scraped_task_list = latest_user_followers.scraped_task_list

        userFollowers = UserFollowers(
            user_followers_id=user_followers_id,
            create_at=create_at,
            scraped_ig_id=raw_data["scraped_ig_id"],
            followers_count=raw_data["followers_count"],
            followers_list=raw_data["followers_list"],
            followers_change_count=followers_change_count,
            followers_change_list=followers_change_list,
            scrape_user_count=scrape_user_count,
            scrape_user_list=scrape_user_list,
            scraped_times=scraped_times,
            scraped_task_list=scraped_task_list,
        )

        userFollowers.save()

        return userFollowers

    @staticmethod
    def get_latest_user_followers_by_ig_id(scraped_ig_id: str):
        try:
            return (
                UserFollowers.objects(scraped_ig_id=scraped_ig_id)
                .order_by("-create_at")
                .first()
            )
        except Exception as e:
            print("Error: ", str(e))

    @staticmethod
    def get_all_user_followers_by_ig_id(scraped_ig_id: str):
        try:
            userFollowers = UserFollowers.objects(scraped_ig_id=scraped_ig_id)
            if userFollowers:
                return userFollowers
            else:
                return None

        except Exception as e:
            print(f"Error getting user followers by ig id: {e}")
            return None

    # maybe useful in the future, but not now
    # def update_user_followers(user_followers_id: str):
    #     return UserFollowers.objects(user_followers_id=user_followers_id).update_one()

    @staticmethod
    def delete_user_followers_by_ig_id(scraped_ig_id: str):
        try:
            userFollower = (
                UserFollowers.objects(scraped_ig_id=scraped_ig_id)
                .order_by("-create_at")
                .first()
            )
            if userFollower:
                userFollower.delete()
                return 1
        except Exception as e:
            print(e)
